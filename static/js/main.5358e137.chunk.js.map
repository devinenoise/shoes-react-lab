{"version":3,"sources":["ShoeItem.js","ShoeList.js","App.js","serviceWorker.js","index.js"],"names":["ShoeItem","class","id","this","props","data","name","brand","src","url","alt","type","String","laces","Component","ShoeList","state","shoes","request","get","setState","body","map","shoe","to","key","App","exact","path","component","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gVACqBA,E,iLAEb,OACI,yBAAKC,MAAM,YACP,wBAAIC,GAAG,aACH,4BAAKC,KAAKC,MAAMC,KAAKC,MACrB,sCAAYH,KAAKC,MAAMC,KAAKE,OAC5B,yBAAKN,MAAM,cAAcO,IAAKL,KAAKC,MAAMC,KAAKI,IAAKC,IAAKP,KAAKC,MAAMC,KAAKC,OACxE,qCAAWH,KAAKC,MAAMC,KAAKM,MAC3B,qCAAWC,OAAOT,KAAKC,MAAMC,KAAKQ,c,GAThBC,a,iBCMjBC,E,2MACjBC,MAAQ,CAEJC,MAAO,I,mNAGYC,IAAQC,IAAR,qD,OAAbd,E,OACNF,KAAKiB,SAAS,CAAEH,MAAOZ,EAAKgB,O,qIAI5B,OACI,6BACI,4BAEQlB,KAAKa,MAAMC,MAAMK,KAAI,SAAAC,GAAI,OACrB,kBAAC,IAAD,CAAMC,GAAE,gBAAWD,EAAKjB,MAAQmB,IAAKF,EAAKjB,MACtC,kBAAC,EAAD,CAAUD,KAAMkB,c,GAjBVT,aCGjBY,E,iLAEjB,OACE,kBAAC,IAAD,KACE,6BAEE,kBAAC,IAAD,CAAMF,GAAG,KAAT,QAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,IAAIC,UAAWd,W,GATZe,IAAMhB,WCEnBiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5358e137.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nexport default class ShoeItem extends Component {\r\n    render() {\r\n        return (\r\n            <div class=\"shoe-box\">\r\n                <li id=\"shoe-list\">\r\n                    <h1>{this.props.data.name}</h1>\r\n                    <h3>brand: {this.props.data.brand}</h3>\r\n                    <img class=\"shoe-images\" src={this.props.data.url} alt={this.props.data.name} />\r\n                    <h3>Type: {this.props.data.type}</h3>\r\n                    <p>laces: {String(this.props.data.laces)}</p>\r\n                </li>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport ShoeItem from \"./ShoeItem.js\";\r\nimport request from 'superagent';\r\n// import SearchBar from './SearchBar.js';\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default class ShoeList extends Component {\r\n    state = {\r\n        // searchQuery: this.props.match.params.name,\r\n        shoes: [],\r\n    }\r\n    async componentDidMount() {\r\n        const data = await request.get(`https://rocky-basin-80195.herokuapp.com/api/shoes`)\r\n        this.setState({ shoes: data.body })\r\n    }\r\n    // handleChange = (e) => this.setState({ searchQuery: e.target.value })\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ul>\r\n                    {\r\n                        this.state.shoes.map(shoe =>\r\n                            <Link to={`shoes/${shoe.name}`} key={shoe.name}>\r\n                                <ShoeItem data={shoe} />\r\n                            </Link>)\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n// handleSearch = async (e) => {\r\n//     e.preventDefault();\r\n//     const data = await request.get(`https://rocky-basin-80195.herokuapp.com/api/shoes${this.state.searchQuery}`)\r\n//     this.setState({\r\n//         shoes: data.body.results,\r\n//     })\r\n//     this.props.history.push(this.state.searchQuery)\r\n// }\r\n// <header>\r\n//     <SearchBar\r\n//         searchQuery={this.state.searchQuery}\r\n//         handleSearch={this.handleSearch}\r\n//         handleChange={this.handleChange}\r\n//     />\r\n// </header>","import React from 'react';\nimport './App.css';\nimport {\n  Route,\n  Switch,\n  Link,\n  BrowserRouter as Router,\n} from 'react-router-dom';\nimport ShoeList from './ShoeList.js';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          {/* <Header /> */}\n          <Link to=\"/\">Home</Link>\n          {/* <Link to=\"/about-me/about\">about me</Link> */}\n          <Switch>\n            <Route exact path=\"/\" component={ShoeList} />\n            {/* <Route exact path=\"/\" component={Detail} /> */}\n            {/* <Route exact path=\"/\" component={AboutMe} /> */}\n          </Switch>\n        </div>\n      </Router>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}