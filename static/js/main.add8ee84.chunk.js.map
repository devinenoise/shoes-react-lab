{"version":3,"sources":["ShoeItem.js","Detail.js","ShoeApi.js","ShoeList.js","AddShoe.js","Header.js","UpdateShoe.js","App.js","serviceWorker.js","index.js"],"names":["ShoeItem","data","this","props","className","id","name","brand","src","url","alt","type","String","laces","to","Component","Detail","state","shoe","shoeId","match","params","request","get","body","setState","console","log","ShoeList","shoes","handleChange","e","searchQuery","target","value","map","key","AddShoe","types","componentDidMount","a","handleNameChange","handleBrandChange","handleImageChange","handleTypeChange","Number","handleLacesChange","actualBool","handleSubmit","preventDefault","newShoe","typeId","post","history","push","onSubmit","onChange","Header","UpdateShoe","shoeToUpdate","type_id","handleDelete","delete","handleUpdate","updateShoe","put","onClick","App","exact","path","component","React","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.add8ee84.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default class ShoeItem extends Component {\r\n    render() {\r\n\r\n        const { data } = this.props;\r\n\r\n        return (\r\n            <div className=\"shoe-box\">\r\n                <li id=\"shoe-list\">\r\n                    <h1>{this.props.data.name}</h1>\r\n                    <h3>brand: {this.props.data.brand}</h3>\r\n                    <img className=\"shoe-images\" src={this.props.data.url} alt={this.props.data.name} />\r\n                    <h3>Type: {this.props.data.type}</h3>\r\n                    <p>laces: {String(this.props.data.laces)}</p>\r\n                    <Link to={`update/${data.id}`}> Update </Link>\r\n                </li>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { getShoe } from './ShoeApi'\r\n\r\n\r\nexport default class Detail extends Component {\r\n    state = { shoe: {} }\r\n\r\n    async componentDidMount() {\r\n        const data = await getShoe(this.props.match.params.shoeId);\r\n        \r\n        if (data.body) { this.setState({ shoe: data.body[0] }) }\r\n\r\n        console.log(this.state.shoe);\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n            { this.state.shoe && \r\n            <div>\r\n            \r\n            <h1 className=\"shoe-name\">{this.state.shoe.name}</h1>\r\n            <h3 className=\"shoe-name\">Brand: {this.state.shoe.brand}</h3>\r\n            <img className=\"shoe-images\" src={this.state.shoe.url} alt={this.state.shoe.name} />\r\n            {/* <h3>Type: {this.state.shoe.type_id}</h3> */}\r\n            <p>Laces: {String(this.state.shoe.laces)}</p>\r\n            </div>\r\n            }\r\n            </>\r\n        );\r\n    }\r\n}","import request from \"superagent\";\r\n\r\nexport const GetShoes = () => request.get(`https://rocky-basin-80195.herokuapp.com/api/shoes/`)\r\n\r\nexport const getShoe = (shoeId) => request.get(`https://rocky-basin-80195.herokuapp.com/api/shoes/${shoeId}`)","import React, { Component } from 'react'\r\nimport ShoeItem from \"./ShoeItem.js\";\r\nimport request from 'superagent';\r\nimport { GetShoes } from './ShoeApi.js'\r\nimport { Link } from 'react-router-dom'\r\nimport Detail from './Detail';\r\n\r\nexport default class ShoeList extends Component {\r\n    state = {\r\n    //    searchQuery: this.props.match.params.name,\r\n        shoes: [],\r\n    }\r\n    async componentDidMount() {\r\n        const data = await GetShoes();\r\n        this.setState({ shoes: data.body })\r\n    }\r\n    handleChange = (e) => this.setState({ searchQuery: e.target.value })\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ul>\r\n                    {\r\n                        this.state.shoes.map(shoe =>\r\n                            <Link to={`shoes/${shoe.id}`} key={shoe.id}>\r\n                                <ShoeItem data={shoe} />\r\n                            </Link>)\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n// handleSearch = async (e) => {\r\n//     e.preventDefault();\r\n//     const data = await request.get(`https://rocky-basin-80195.herokuapp.com/api/shoes${this.state.searchQuery}`)\r\n//     this.setState({\r\n//         shoes: data.body.results,\r\n//     })\r\n//     this.props.history.push(this.state.searchQuery)\r\n// }\r\n// <header>\r\n//     <SearchBar\r\n//         searchQuery={this.state.searchQuery}\r\n//         handleSearch={this.handleSearch}\r\n//         handleChange={this.handleChange}\r\n//     />\r\n// </header>","import React, { Component } from 'react'\r\nimport request from 'superagent';\r\n\r\n\r\nexport default class AddShoe extends Component {\r\n    state = {\r\n        types: [],\r\n        laces: true,\r\n        type: 4,\r\n    };\r\n    componentDidMount = async () => {\r\n        const types = await request.get(`https://rocky-basin-80195.herokuapp.com/api/types`);\r\n        this.setState({ types: types.body });\r\n    }\r\n    handleNameChange = (e) => {\r\n        this.setState({ name: e.target.value })\r\n    }\r\n    handleBrandChange = (e) => {\r\n        this.setState({ brand: (e.target.value) })\r\n    }\r\n    handleImageChange = (e) => {\r\n        this.setState({ url: e.target.value })\r\n    }\r\n    handleTypeChange = (e) => {\r\n        this.setState({ type: Number(e.target.value) })\r\n    }\r\n    handleLacesChange = (e) => {\r\n        const actualBool = e.target.value === 'false'\r\n            ? false\r\n            : true\r\n        this.setState({ laces: actualBool })\r\n    }\r\n\r\n    handleSubmit = async (e) => {\r\n\r\n        e.preventDefault();\r\n        const newShoe = {\r\n            name: this.state.name,\r\n            brand: this.state.brand,\r\n            url: this.state.url,\r\n            typeId: this.state.type,\r\n            laces: this.state.laces,\r\n        }\r\n        // console.log(newShoe);\r\n        await request.post('https://rocky-basin-80195.herokuapp.com/api/shoes', newShoe);\r\n        this.props.history.push('/');\r\n    }\r\n    render() {\r\n\r\n\r\n\r\n        // const typeArray = this.state.types.map(obj => {\r\n        //     return { type: obj.type, id: obj.type_id }\r\n        // });\r\n        // const typeX = typeArray.reduce((typeName, index) => typeName.includes(index) ? typeName : [...typeName, index], [])\r\n\r\n        // // console.log(typeX);\r\n\r\n\r\n        return (\r\n            <div className=\"shoe-form\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    Make A New Shoe\r\n                    <br />\r\n                    <label>\r\n                        Name:\r\n                        <input onChange={this.handleNameChange} />\r\n                    </label>\r\n                    <br />\r\n                    <label>\r\n                        Brand:\r\n                        <input onChange={this.handleBrandChange} />\r\n                    </label>\r\n                    <br />\r\n                    <label>\r\n                        Image:\r\n                        <input onChange={this.handleImageChange} />\r\n                    </label>\r\n                    <br />\r\n                    <label>\r\n                        Type:\r\n                        <select onChange={this.handleTypeChange}>\r\n                            {\r\n                                this.state.types.map(type =>\r\n                                    <option value={type.id}>\r\n                                        {type.name}\r\n                                    </option>)}\r\n                        </select>\r\n                    </label>\r\n                    <br />\r\n                    <label>\r\n                        Has Laces:\r\n                        <select onChange={this.handleLacesChange}>\r\n                            <option value=\"true\" >Yes</option>\r\n                            <option value=\"false\" >No</option>\r\n                        </select>\r\n                    </label>\r\n                    <br />\r\n                    <button>Submit</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport './App.css';\r\n\r\nexport default class Header extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"header\">\r\n                <h1>Shoe Shop</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport request from 'superagent';\r\n\r\n\r\n\r\n\r\nexport default class UpdateShoe extends Component {\r\n    state = {\r\n        types: [],\r\n\r\n    };\r\n\r\n    componentDidMount = async () => {\r\n        const types = await request.get(`https://rocky-basin-80195.herokuapp.com/api/types`);\r\n        this.setState({ types: types.body });\r\n\r\n\r\n        const shoe = await request.get(`https://rocky-basin-80195.herokuapp.com/api/shoes/${this.props.match.params.shoeId}`);\r\n\r\n        console.log(shoe.body);\r\n        const shoeToUpdate = shoe.body[0];\r\n\r\n        this.setState({\r\n            name: shoeToUpdate.name,\r\n            brand: shoeToUpdate.brand,\r\n            typeId: shoeToUpdate.type_id,\r\n            url: shoeToUpdate.url,\r\n            laces: shoeToUpdate.laces,\r\n        });\r\n    }\r\n\r\n\r\n\r\n    handleNameChange = (e) => {\r\n        this.setState({ name: e.target.value })\r\n    }\r\n    handleBrandChange = (e) => {\r\n        this.setState({ brand: (e.target.value) })\r\n    }\r\n    handleImageChange = (e) => {\r\n        this.setState({ url: e.target.value })\r\n    }\r\n    handleTypeChange = (e) => {\r\n        this.setState({ typeId: e.target.value })\r\n    }\r\n    handleLacesChange = (e) => {\r\n        const actualBool = e.target.value === 'false'\r\n            ? false\r\n            : true\r\n        this.setState({ laces: actualBool })\r\n    }\r\n\r\n\r\n    handleDelete = async () => {\r\n        await request.delete(`https://rocky-basin-80195.herokuapp.com/api/shoes/${this.props.match.params.shoeId}`);\r\n        this.props.history.push('/');\r\n    }\r\n\r\n\r\n\r\n    handleUpdate = async (e) => {\r\n        e.preventDefault();\r\n\r\n        const updateShoe = {\r\n            name: this.state.name,\r\n            brand: this.state.brand,\r\n            url: this.state.url,\r\n            typeId: Number(this.state.typeId),\r\n            laces: this.state.laces,\r\n            id: Number(this.props.match.params.shoeId)\r\n        }\r\n        const dbShoe = await request.put('https://rocky-basin-80195.herokuapp.com/api/shoes', updateShoe);\r\n\r\n        this.props.history.push('/');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"update\">\r\n                <div className=\"shoe-form\">\r\n                    <form onSubmit={this.handleUpdate}>\r\n                        Update Your Shoe\r\n                    <br />\r\n                        <label>\r\n                            Name:\r\n                        <input onChange={this.handleNameChange} value={this.state.name} />\r\n                        </label>\r\n                        <br />\r\n                        <label>\r\n                            Brand:\r\n                        <input onChange={this.handleBrandChange} value={this.state.brand} />\r\n                        </label>\r\n                        <br />\r\n                        <label>\r\n                            Image:\r\n                        <input onChange={this.handleImageChange} value={this.state.url} />\r\n                        </label>\r\n                        <br />\r\n                        <label>\r\n                            Type:\r\n                        <select onChange={this.handleTypeChange} >\r\n                                {\r\n                                    this.state.types.map(type =>\r\n                                        <option value={type.id}>\r\n                                            {type.name}\r\n                                        </option>)}\r\n                            </select>\r\n                        </label>\r\n                        <br />\r\n                        <label>\r\n                            Has Laces:\r\n                        <select onChange={this.handleLacesChange}>\r\n                                <option value=\"true\" >Yes</option>\r\n                                <option value=\"false\" >No</option>\r\n                            </select>\r\n                        </label>\r\n                        <br />\r\n                        <button>Update</button>\r\n                    </form>\r\n\r\n                    <button className=\"delete\" onClick={this.handleDelete}\r\n                    >DELETE</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {\r\n  Route,\r\n  Switch,\r\n  Link,\r\n  BrowserRouter as Router,\r\n} from 'react-router-dom';\r\nimport ShoeList from './ShoeList.js';\r\nimport Detail from './Detail.js';\r\nimport AddShoe from './AddShoe.js';\r\nimport Header from './Header.js';\r\nimport UpdateShoe from './UpdateShoe.js';\r\n\r\n\r\n\r\nexport default class App extends React.Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div>\r\n          <Header />\r\n          <Link className=\"nav\" to=\"/\">Home</Link>\r\n          <Link className=\"nav\" to=\"/AddShoe/New\">Add A Shoe</Link>\r\n          {/* <Link to=\"/about-me/about\">about me</Link> */}\r\n\r\n\r\n          <Switch>\r\n            <Route exact path=\"/:shoes?\" component={ShoeList} />\r\n            <Route exact path=\"/update/:shoeId\" component={UpdateShoe} />\r\n            <Route exact path=\"/shoes/:shoeId\" component={Detail} />\r\n            <Route path=\"/:AddShoe/New\" component={AddShoe} />\r\n\r\n            {/* <Route exact path=\"/\" component={AboutMe} /> */}\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    )\r\n  }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}